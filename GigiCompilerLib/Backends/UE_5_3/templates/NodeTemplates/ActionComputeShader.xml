<ActionComputeShader:TechniqueCPP_Shaders>
// Compute Shader "/*$(Node:Name)*/"/*$(Node:CommentInComment)*/
class F/*$(Node:Name)*/CS : public FGlobalShader
{
public:
    DECLARE_GLOBAL_SHADER(F/*$(Node:Name)*/CS);
    SHADER_USE_PARAMETER_STRUCT(F/*$(Node:Name)*/CS, FGlobalShader);

    BEGIN_SHADER_PARAMETER_STRUCT(FParameters, )
/*$(Node:ShaderParams)*/    END_SHADER_PARAMETER_STRUCT()

    static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters&amp; Parameters)
    {
        return true;
    }

    static void ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters&amp; Parameters, FShaderCompilerEnvironment&amp; OutEnvironment)
    {
        FGlobalShader::ModifyCompilationEnvironment(Parameters, OutEnvironment);/*$(ModifyCompilationEnvironment)*//*$(Node:ShaderDefines)*/
    }
};

IMPLEMENT_GLOBAL_SHADER(F/*$(Node:Name)*/CS, "/*$(Node:FileName)*/", "/*$(Node:EntryPoint)*/", SF_Compute);

</ActionComputeShader:TechniqueCPP_Shaders>

<ActionComputeShader:AddTechnique>
    // Run Compute Shader "/*$(Node:Name)*/"/*$(Node:CommentInComment)*/
/*$(Node:Condition)*/    {
        // Set shader parameters
        F/*$(Node:Name)*/CS::FParameters* PassParameters = GraphBuilder.AllocParameters&lt;F/*$(Node:Name)*/CS::FParameters&gt;();
/*$(Node:SetParameters)*//*$(Node:Dispatch)*/    }

</ActionComputeShader:AddTechnique>